from flask import Blueprint, request, jsonify

bp = Blueprint('dumpsters', __name__)

# Simula칞칚o de banco de dados em mem칩ria
dumpsters = [
    {"id": 1, "location": "Rua A, 123", "size": "5m췁"},
    {"id": 2, "location": "Av. B, 456", "size": "7m췁"}
]

# 游릭 GET - Listar todas as ca칞ambas
@bp.route('/dumpsters', methods=['GET'])
def get_dumpsters():
    return jsonify(dumpsters)

# 游릭 POST - Criar uma nova ca칞amba
@bp.route('/dumpsters', methods=['POST'])
def create_dumpster():
    data = request.get_json()
    new_id = max(d['id'] for d in dumpsters) + 1 if dumpsters else 1
    new_dumpster = {"id": new_id, "location": data["location"], "size": data["size"]}
    dumpsters.append(new_dumpster)
    return jsonify(new_dumpster), 201

# 游릭 GET - Buscar uma ca칞amba espec칤fica
@bp.route('/dumpsters/<int:id>', methods=['GET'])
def get_dumpster(id):
    dumpster = next((d for d in dumpsters if d["id"] == id), None)
    if not dumpster:
        return jsonify({"error": "Ca칞amba n칚o encontrada"}), 404
    return jsonify(dumpster)

# 游릭 PUT - Atualizar uma ca칞amba
@bp.route('/dumpsters/<int:id>', methods=['PUT'])
def update_dumpster(id):
    data = request.get_json()
    dumpster = next((d for d in dumpsters if d["id"] == id), None)
    if not dumpster:
        return jsonify({"error": "Ca칞amba n칚o encontrada"}), 404
    dumpster.update({"location": data.get("location", dumpster["location"]),
                     "size": data.get("size", dumpster["size"])})
    return jsonify(dumpster)

# 游릭 DELETE - Remover uma ca칞amba
@bp.route('/dumpsters/<int:id>', methods=['DELETE'])
def delete_dumpster(id):
    global dumpsters
    dumpsters = [d for d in dumpsters if d["id"] != id]
    return jsonify({"message": "Ca칞amba removida com sucesso"}), 200
